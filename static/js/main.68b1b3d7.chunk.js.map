{"version":3,"sources":["api/api.ts","components/Users/Users.module.css","api/profileAPI.ts","redux/profile-reducer.ts","redux/dialogs-reducer.ts","assets/images/user.jpg","common/Loading/Loading.module.css","components/Navbar/Navbar.module.css","common/FormControls/FormControls.tsx","components/Navbar/Navbar.tsx","api/authAPI.ts","api/securityAPI.ts","redux/auth-reducer.ts","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","redux/app-reducer.ts","api/usersAPI.ts","redux/users-reducer.ts","redux/redux-store.ts","hoc/withSuspense.js","redux/users-selectors.ts","common/Paginator/Paginator.tsx","components/Users/User.tsx","components/Users/UsersSearchForm.tsx","components/Users/Users.tsx","components/Users/UsersContainer.tsx","components/Login/Login.tsx","App.tsx","reportWebVitals.js","index.js","common/FormControls/FormControls.module.css","helpers/validate/validate.ts","assets/images/loading.svg","common/Loading/Loading.tsx","components/Header/Header.module.css","common/Paginator/Paginator.module.css"],"names":["ResultCodeEnum","ResultCodeCaptchaEnum","instance","axios","create","baseURL","withCredentials","headers","module","exports","profileAPI","userId","get","then","response","data","status","put","photoFile","formData","FormData","append","profile","ADD_POST","SET_USER_PROFILE","SET_STATUS","SAVE_PHOTO_SUCCESS","SET_ERRORSTATUS","SET_ERRORPHOTO","initialState","posts","id","message","like","errorStatus","errorPhoto","newPostText","actions","addPost","addPostText","type","setUserProfile","setUserStatus","savePhotoSuccess","photos","getErrorStatus","getErrorPhoto","getUserStatus","dispatch","a","getStatus","updateUserStatus","getState","userStatus","profilePage","resultCode","Success","Error","messages","setTimeout","error","savePhoto","file","photo","getUserProfile","userProfile","saveProfile","userInfo","auth","stopSubmit","_error","Promise","reject","profileReducer","state","action","newPost","ADD_MESSAGE","dialogs","name","newTextMessage","addMessage","addMessageText","dialogsReducer","newMessage","FormControl","meta","touched","children","hasError","className","s","formControls","Textarea","props","input","restProps","Input","createField","placeholder","component","validate","text","Navbar","nav","item","to","activeClassName","activeLink","authAPI","email","password","rememberMe","captcha","post","delete","securityAPI","getCaptcha","SET_AUTH_USER_DATA","GET_CAPTCHA_URL_SUCCESS","login","isAuth","captchaURL","payload","getAuth","Captha","length","captha","url","authReducer","Header","src","loginBlock","onClick","logout","HeaderContainer","header","this","React","Component","connect","INISIALIZED_SUCCESS","inisialized","appReducer","usersAPI","currentPage","count","term","friend","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_PAGE","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING","SET_FILTER","users","totalUsersCount","isFetching","isFollowing","filter","getUsers","items","totalCount","followUnfollowFlow","apiMethod","actionCreator","usersReducer","map","u","followed","rootReducers","combineReducers","dialogsPage","usersPage","form","formReducer","app","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","withSuspense","WrappedComponent","Suspense","fallback","getUser","createSelector","getCount","getTotalUsersCount","getCurrentPage","getIsFetching","getIsFollowing","getSetFilter","Paginator","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","cn","pageNumber","p","selectedPage","e","onPageChanged","User","user","large","userPhoto","disabled","some","unfollowUser","followUser","usersSearchFormValidate","values","UsersSearchForm","memo","useSelector","enableReinitialize","initialValues","String","onSubmit","setSubmitting","onFilterChange","isSubmitting","as","value","Users","useDispatch","history","useHistory","useEffect","parsed","queryString","location","search","substr","actualPage","actualFilter","page","Number","query","pathname","follow","unfollow","UsersPage","Loading","Login","LoginReduxForm","reduxForm","handleSubmit","required","undefined","formSummuryError","DialogsContainer","lazy","ProfileContainer","SuspendedDialogs","SuspendedProfile","App","exact","path","render","AppContainer","withRouter","inisializedApp","SamuraiJSApp","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById","maxLengthCreator","maxSymbols","loading"],"mappings":"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","file":"static/js/main.68b1b3d7.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport { usersType } from '../TypeScript/TypeScript';\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"afacc5e8-05db-46cf-8293-890c5a850969\"\r\n    },\r\n})\r\n\r\nexport enum ResultCodeEnum {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\n\r\nexport enum ResultCodeCaptchaEnum {\r\n    Captha = 10\r\n}\r\n\r\nexport type GetItemsType = {\r\n    items: Array<usersType>\r\n    totalCount: number\r\n    error: string\r\n}\r\n\r\nexport type APIResponseType<D = {}, RC = ResultCodeEnum> = {\r\n    data: D\r\n    messages: Array<string>\r\n    resultCode: RC\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"photo\":\"Users_photo__FsjZe\",\"user\":\"Users_user__3N0dV\"};","import { profileType, photosType } from './../TypeScript/TypeScript';\r\nimport { instance, APIResponseType } from './api';\r\n\r\n\r\ntype SavePhotoResponseDataType = {\r\n    photos: photosType\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number | null) {\r\n        return instance.get<profileType>(`profile/` + userId).then(response => {\r\n            return response.data\r\n        })\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get<string>(`profile/status/` + userId).then(response => {\r\n            return response.data\r\n        })\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<APIResponseType>(`profile/status/`, { status: status }).then(response => {\r\n            return response.data\r\n        })\r\n    },\r\n    savePhoto(photoFile: any) {\r\n        const formData = new FormData();\r\n        formData.append(\"image\", photoFile);\r\n        return instance.put<APIResponseType<SavePhotoResponseDataType>>(`profile/photo`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        }).then(response => {\r\n            return response.data\r\n        })\r\n    },\r\n    saveProfile(profile: profileType) {\r\n        return instance.put<APIResponseType>(`profile`, profile).then(response => {\r\n            return response.data\r\n        })\r\n    }\r\n}","import { ResultCodeEnum } from './../api/api';\r\nimport { FormAction, stopSubmit } from \"redux-form\";\r\nimport { profileAPI } from \"../api/profileAPI\";\r\nimport { photosType, postsType, profileType } from \"../TypeScript/TypeScript\";\r\nimport { BaseThunkType, InferActionsTypes } from \"./redux-store\";\r\n\r\nconst ADD_POST = \"my-app/profileReducer/ADD-POST\";\r\nconst SET_USER_PROFILE = \"my-app/profileReducer/SET_USER_PROFILE\";\r\nconst SET_STATUS = \"my-app/profileReducer/SET-STATUS\";\r\nconst SAVE_PHOTO_SUCCESS = \"my-app/profileReducer/SAVE_PHOTO_SUCCESS\";\r\nconst SET_ERRORSTATUS = \"my-app/profileReducer/SET_ERRORSTATUS\";\r\nconst SET_ERRORPHOTO = \"my-app/profileReducer/SET_ERRORPHOTO\";\r\n\r\nlet initialState = {\r\n        posts: [\r\n            { id: 1, message: \"I'm react developer\", like: 777 },\r\n            { id: 2, message: \"Hi, how are you?\", like: 1277 },\r\n            { id: 3, message: \"Hi, I'm Dima\", like: 2121 },\r\n        ] as Array<postsType>,\r\n        profile: null as profileType | null,\r\n        status: \"\",\r\n        errorStatus: false as boolean | string,\r\n        errorPhoto: false as boolean | string,\r\n        newPostText: \"\",\r\n};\r\n\r\nconst profileReducer = (state = initialState, action: ActionsType): initialStateType => {\r\n    switch(action.type) {\r\n        case ADD_POST: {\r\n            let newPost = {\r\n                id: 4,\r\n                message: action.addPostText,\r\n                like: 777,\r\n            }\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n                newPostText: \"\"\r\n            };\r\n        }\r\n        case SET_USER_PROFILE: {\r\n            return {\r\n                ...state,\r\n                profile: action.profile,\r\n            }\r\n        }\r\n        case SET_STATUS: {\r\n            return {\r\n                ...state,\r\n                status: action.status,\r\n            }\r\n        }\r\n        case SAVE_PHOTO_SUCCESS: {\r\n            return {\r\n                ...state, \r\n                profile: {...state.profile, photos: action.photos} as profileType}\r\n            \r\n        }\r\n        case SET_ERRORSTATUS: {\r\n            return {\r\n                ...state,\r\n                errorStatus: action.errorStatus\r\n            }\r\n        }\r\n        case SET_ERRORPHOTO: {\r\n            return {\r\n              ...state,\r\n              errorPhoto: action.errorPhoto\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const actions = {\r\n    addPost: (addPostText: string) => ({type: ADD_POST, addPostText} as const),\r\n    setUserProfile: (profile: profileType) => ({ type: SET_USER_PROFILE, profile} as const),\r\n    setUserStatus: (status: string) => ({type: SET_STATUS, status} as const),\r\n    savePhotoSuccess: (photos: photosType) => ({type: SAVE_PHOTO_SUCCESS, photos} as const),\r\n    getErrorStatus: (errorStatus: boolean | string) => ({type: SET_ERRORSTATUS, errorStatus} as const),\r\n    getErrorPhoto: (errorPhoto: boolean | string) => ({type: SET_ERRORPHOTO, errorPhoto} as const),\r\n}\r\n\r\n\r\nexport const getUserStatus = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n       let getStatus = await profileAPI.getStatus(userId)\r\n            dispatch(actions.setUserStatus(getStatus))\r\n    }\r\n}\r\n\r\nexport const updateUserStatus = (status: string): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let userStatus = await profileAPI.updateStatus(status)\r\n        let error = getState().profilePage.errorStatus;\r\n            if(userStatus.resultCode === ResultCodeEnum.Success) {\r\n                dispatch(actions.setUserStatus(status))\r\n            } else if(userStatus.resultCode === ResultCodeEnum.Error ) {\r\n                    dispatch(actions.getErrorStatus(userStatus.messages[0]))\r\n                    setTimeout((error) => {\r\n                        dispatch(actions.getErrorStatus(error))\r\n                    }, 2000)\r\n            }\r\n    }\r\n}\r\n\r\nexport const savePhoto = (file: File): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let photo = await profileAPI.savePhoto(file)\r\n        let error = getState().profilePage.errorPhoto;\r\n            if(photo.resultCode === 0) {\r\n                dispatch(actions.savePhotoSuccess(photo.data.photos))\r\n            } else if(photo.resultCode === 1) {\r\n                dispatch(actions.getErrorPhoto(photo.messages[0]))\r\n                setTimeout((error) => {\r\n                    dispatch(actions.getErrorPhoto(error))\r\n                }, 2000)\r\n            }\r\n    }\r\n}\r\n\r\nexport const getUserProfile = (userId: number | null): ThunkType => {\r\n    return async (dispatch) => {\r\n       let userProfile = await profileAPI.getProfile(userId);\r\n            dispatch(actions.setUserProfile(userProfile))\r\n            setTimeout((error) => {\r\n                dispatch(actions.getErrorStatus(error))\r\n            }, 2000)\r\n    }\r\n}\r\n\r\nexport const saveProfile = (profile: profileType): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        const userInfo = await profileAPI.saveProfile(profile)\r\n        const userId = getState().auth.id;\r\n            if(userInfo.resultCode === ResultCodeEnum.Success) {\r\n                dispatch(getUserProfile(userId))\r\n            } else {\r\n                dispatch(stopSubmit(\"edit-profile\", {_error:userInfo.messages[0]}));\r\n                return Promise.reject(userInfo.messages[0])\r\n            }\r\n    }\r\n}\r\n\r\n\r\nexport default profileReducer;\r\n\r\ntype initialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>;\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>","import { dialogsType, messagesType } from \"../TypeScript/TypeScript\";\r\nimport { InferActionsTypes } from './redux-store';\r\n\r\nconst ADD_MESSAGE = \"my-app/dialogsReducer/ADD-MESSAGE\";\r\n\r\n\r\n\r\nlet initialState = {\r\n        dialogs: [\r\n            { id: 1, name: \"Dima\" },\r\n            { id: 2, name: \"Gosha\" },\r\n            { id: 3, name: \"Petr\" },\r\n            { id: 4, name: \"Vanya\" },\r\n            { id: 5, name: \"Olga\" },\r\n            { id: 6, name: \"Dima\" },\r\n        ] as Array<dialogsType>,\r\n        messages: [\r\n            { id: 1, message: \"Hi\" },\r\n            { id: 2, message: \"How are you?\" },\r\n            { id: 3, message: \"Yo\" },\r\n            { id: 4, message: \"Yo\" },\r\n            { id: 5, message: \"Yo\" },\r\n        ] as Array<messagesType>,\r\n        newTextMessage: \"\"\r\n};\r\n\r\n\r\nconst dialogsReducer = (state = initialState, action: ActionsType): initialStateType => {\r\n    switch(action.type) {\r\n        case ADD_MESSAGE: {\r\n            let newMessage = {\r\n                id: 6,\r\n                message: action.addMessageText,\r\n            }\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, newMessage],\r\n                newTextMessage: \"\",\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    addMessage: (addMessageText: string) => ({type: ADD_MESSAGE, addMessageText} as const),\r\n}\r\n\r\ntype addMessageActionType = {\r\n    type: typeof ADD_MESSAGE\r\n    addMessageText: string\r\n}\r\n\r\n\r\nexport default dialogsReducer;\r\ntype initialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\n","export default __webpack_public_path__ + \"static/media/user.634c58c9.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loading\":\"Loading_loading__3FByg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__260DX\",\"item\":\"Navbar_item__17OWw\",\"activeLink\":\"Navbar_activeLink__AAmeG\"};","import React from 'react';\r\nimport { Field, WrappedFieldMetaProps, WrappedFieldProps } from 'redux-form';\r\nimport { ValidateType } from '../../helpers/validate/validate';\r\nimport s from './FormControls.module.css';\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\nconst FormControl: React.FC<FormControlPropsType> = ({ meta: { touched, error }, children }) => {\r\n    const hasError = touched && error;\r\n    return (\r\n        <div className={s.formControls + \" \" + (hasError ? s.error : \"\")}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const { input, meta, ...restProps } = props;\r\n    return <FormControl {...props}><textarea {...input} {...restProps} /></FormControl>\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const { input, meta, ...restProps } = props;\r\n    return <FormControl {...props}><input {...input} {...restProps} /></FormControl>\r\n}\r\n\r\nexport function createField<FormKeysType extends string>(placeholder: string | undefined, name: FormKeysType, component: React.FC<WrappedFieldProps>, validate: Array<ValidateType>, props = {}, text = \"\") {\r\n    return <div>\r\n        <Field placeholder={placeholder}\r\n            name={name} component={component}\r\n            validate={validate} {...props} /> {text}\r\n    </div >\r\n}\r\n\r\nexport type GetStringKeys<T> = Extract<keyof T, string>","import { NavLink } from 'react-router-dom';\r\nimport s from './Navbar.module.css'\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className={s.nav}>\r\n        <div className={s.item}>\r\n          <NavLink to='/profile' activeClassName={s.activeLink}>Profile</NavLink>\r\n        </div>\r\n        <div className={s.item}>\r\n          <NavLink to='/dialogs' activeClassName={s.activeLink}>Message</NavLink>\r\n        </div>\r\n        <div className={s.item}>\r\n          <NavLink to='/users' activeClassName={s.activeLink}>Users</NavLink>\r\n        </div>\r\n        <div className={s.item}>\r\n          <a>Music</a>\r\n        </div>\r\n        <div className={s.item}>\r\n          <a>Settings</a>\r\n        </div>\r\n      </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar; ","import { APIResponseType, instance, ResultCodeCaptchaEnum, ResultCodeEnum } from \"./api\"\r\n\r\ntype getAuthType = {\r\n    id: number,\r\n    email: string,\r\n    login: string\r\n}\r\n\r\n\r\ntype logoutType = {\r\n    userId: number\r\n}\r\n\r\nexport const authAPI = {\r\n    getAuth() {\r\n        return instance.get<APIResponseType<getAuthType>>(`auth/me`).then(response => {\r\n            return response.data\r\n        })\r\n    },\r\n    login(email: string, password: string, rememberMe = false, captcha: string | null) {\r\n        return instance.post<APIResponseType<logoutType, ResultCodeEnum | ResultCodeCaptchaEnum>>(`auth/login/`, { email, password, rememberMe, captcha }).then(response => {\r\n            return response.data\r\n        })\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`).then(response => {\r\n            return response.data\r\n        })\r\n    }\r\n}","import { instance } from \"./api\"\r\n\r\n\r\ntype getCaptcha = {\r\n    url: string\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptcha() {\r\n        return instance.get<getCaptcha>(`security/get-captcha-url`).then(response => {\r\n            return response.data\r\n        })\r\n    }\r\n}\r\n","import { ResultCodeEnum, ResultCodeCaptchaEnum } from './../api/api';\r\nimport { FormAction, stopSubmit } from \"redux-form\";\r\nimport { authAPI } from \"../api/authAPI\";\r\nimport { securityAPI } from \"../api/securityAPI\";\r\nimport { BaseThunkType, InferActionsTypes } from \"./redux-store\";\r\n\r\n\r\nconst SET_AUTH_USER_DATA = \"my-app/authReducer/SET-AUTH-USER-DATA\";\r\nconst GET_CAPTCHA_URL_SUCCESS = \"my-app/authReducer/SET-AUTH-USER-DATA\";\r\n\r\n\r\nlet initialState = {\r\n    id: null as number | null,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false,\r\n    captchaURL: null as string | null \r\n};\r\n\r\n\r\nconst authReducer = (state = initialState, action: ActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case SET_AUTH_USER_DATA:\r\n        case GET_CAPTCHA_URL_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setAuthUserData: (id: number | null, email: string | null, login: string | null, isAuth: boolean) => ({type: SET_AUTH_USER_DATA, payload: { id, email, login, isAuth }}as const),\r\n    getCaptchaURLSuccess: (captchaURL: string)  => ({type: GET_CAPTCHA_URL_SUCCESS, payload: { captchaURL }} as const),\r\n}\r\n\r\nexport const getAuth = (): ThunkType => {\r\n    return async (dispatch) => {\r\n        let response = await authAPI.getAuth()\r\n        if (response.resultCode === ResultCodeEnum.Success) {\r\n            let { id, email, login } = response.data;\r\n            dispatch(actions.setAuthUserData(id, email, login, true))\r\n        }\r\n    }\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkType  => {\r\n    return async (dispatch) => {\r\n        let response = await authAPI.login(email, password, rememberMe, captcha)\r\n        if (response.resultCode === ResultCodeEnum.Success) {\r\n            dispatch(getAuth())\r\n        }\r\n        else {\r\n            if(response.resultCode === ResultCodeCaptchaEnum.Captha) {\r\n                dispatch(getCaptcha())\r\n            }\r\n            let message = response.messages.length > 0 ? response.messages[0] : \"Some error\"\r\n            dispatch(stopSubmit('Login', { _error: message }))\r\n        }\r\n    }\r\n}\r\n\r\nexport const logout = (): ThunkType => {\r\n    return async (dispatch) => {\r\n        let response = await authAPI.logout()\r\n        if (response.resultCode === ResultCodeEnum.Success) {\r\n            dispatch(actions.setAuthUserData(null, null, null, false))\r\n        }\r\n    }\r\n}\r\n\r\nexport const getCaptcha = (): ThunkType => {\r\n    return async (dispatch) => {\r\n        let captha = await securityAPI.getCaptcha();\r\n        dispatch(actions.getCaptchaURLSuccess(captha.url));\r\n    }\r\n}\r\n\r\n\r\nexport default authReducer;\r\n\r\ntype initialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>\r\n","import { NavLink } from 'react-router-dom';\r\nimport s from './Header.module.css';\r\n\r\ntype PropsType = {\r\n    isAuth: boolean\r\n    login: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n    logout: () => void\r\n}\r\n\r\nconst Header: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <header>\r\n            <img src=\"https://w7.pngwing.com/pngs/720/947/png-transparent-logo-dvd-region-code-encapsulated-postscript-world-wide-web-blue-cdr-text.png\" />\r\n            <div className={s.loginBlock}>\r\n            { props.isAuth \r\n                ? <div>{props.login} - <button onClick={props.logout}>Log out</button></div> \r\n                : <NavLink to={'/login'}>Login</NavLink> }\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { logout, login } from '../../redux/auth-reducer';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport Header from './Header';\r\n\r\nimport s from './Header.module.css';\r\n\r\ntype PropsType = OurProps & MapStateToPropsType & MapDispatchPropsType\r\n\r\ntype OurProps = {}\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    logout: () => void\r\n    login: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n}\r\n\r\nclass HeaderContainer extends React.Component<PropsType> {\r\n\r\n    render() {\r\n        return (\r\n            <div className={s.header}>\r\n                <Header {...this.props} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n    }\r\n}\r\n\r\nexport default connect<MapStateToPropsType, MapDispatchPropsType, OurProps, AppStateType>(mapStateToProps, { login, logout })(HeaderContainer)","import { getAuth } from './auth-reducer';\r\nimport { BaseThunkType, InferActionsTypes } from './redux-store';\r\n\r\n\r\nconst INISIALIZED_SUCCESS = \"my-app/appReducer/INISIALIZED-SUCCESS\";\r\n\r\n\r\nlet initialState = {\r\n    inisialized: false,\r\n};\r\n\r\n\r\nconst appReducer = (state = initialState, action: ActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case INISIALIZED_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                inisialized: true,\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    inisializedSuccess: () => ({type: INISIALIZED_SUCCESS} as const)\r\n}\r\n\r\n\r\n\r\nexport const inisializedApp = () => {\r\n    return (dispatch: any) => {\r\n        let promise = dispatch(getAuth());\r\n        promise.then(() => {\r\n            dispatch(actions.inisializedSuccess())\r\n        });\r\n    }\r\n}\r\n\r\nexport default appReducer;\r\ntype initialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType>","import { instance, GetItemsType, APIResponseType } from './api';\r\n\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, count = 10, term: string = '', friend: null | boolean = null ) {\r\n        return instance.get<GetItemsType>(`users?page=${currentPage}&count=${count}&term=${term}` + (friend === null ? '' : `&friend=${friend}`)\r\n        ).then(response => {\r\n            return response.data\r\n        })\r\n    },\r\n    follow(userId: number) {\r\n        return instance.post<APIResponseType>(`follow/${userId}`).then(response => {\r\n            return response.data\r\n        })\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete(`follow/${userId}`).then(response => {\r\n            return response.data\r\n        }) as Promise<APIResponseType>\r\n    },\r\n}","import { ResultCodeEnum } from './../api/api';\r\nimport { usersAPI } from './../api/usersAPI';\r\nimport { Dispatch } from 'react';\r\n\r\nimport { usersType } from \"../TypeScript/TypeScript\";\r\nimport { BaseThunkType, InferActionsTypes } from \"./redux-store\";\r\n\r\nconst FOLLOW = \"my-app/usersReducer/FOLLOW\";\r\nconst UNFOLLOW = \"my-app/usersReducer/UNFOLLOW\";\r\nconst SET_USERS = \"my-app/usersReducer/SET-USERS\";\r\nconst SET_CURRENT_PAGE = \"my-app/usersReducer/SET-CURRENT-PAGE\";\r\nconst SET_PAGE = \"my-app/usersReducer/SET-PAGE\";\r\nconst TOGGLE_IS_FETCHING = \"my-app/usersReducer/TOGGLE-IS-FETCHING\";\r\nconst TOGGLE_IS_FOLLOWING = \"my-app/usersReducer/TOGGLE-IS-FOLOWING\";\r\nconst SET_FILTER = \"my-app/usersReducer/SET_FILTER\";\r\n\r\n\r\n\r\nlet initialState = {\r\n    users: [] as Array<usersType>,\r\n    count: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    isFollowing: [] as Array<number>,\r\n    filter: {\r\n        term: '',\r\n        friend: null as null | boolean \r\n    } \r\n};\r\n\r\n\r\nconst usersReducer = (state = initialState, action: ActionsType): initialStateActionType => {\r\n    switch (action.type) {\r\n        case FOLLOW: {\r\n            return {\r\n                ...state,\r\n                users: state.users.map((u) => {\r\n                    if (u.id === action.userId) {\r\n                        return { ...u, followed: true }\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n        }\r\n        case UNFOLLOW: {\r\n            return {\r\n                ...state,\r\n                users: state.users.map((u) => {\r\n                    if (u.id === action.userId) {\r\n                        return { ...u, followed: false }\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n        }\r\n        case SET_USERS: {\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            }\r\n        }\r\n        case SET_CURRENT_PAGE: {\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            }\r\n        }\r\n        case SET_PAGE: {\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.totalUsersCount\r\n            }\r\n        }\r\n        case TOGGLE_IS_FETCHING: {\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n\r\n            }\r\n        }\r\n        case TOGGLE_IS_FOLLOWING: {\r\n            return {\r\n                ...state,\r\n                isFollowing: action.isFollowing\r\n                    ? [...state.isFollowing, action.userId]\r\n                    : state.isFollowing.filter(id => id != action.userId)\r\n            }\r\n        }\r\n        case SET_FILTER: {\r\n            return {\r\n                ...state,\r\n                filter: action.payload \r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const actions = {\r\n    followSuccess: (userId: number) => ({type: FOLLOW,userId} as const),\r\n    unfollowSuccess: (userId: number) => ({type: UNFOLLOW, userId} as const),\r\n    setUsers: (users: Array<usersType>) => ({type: SET_USERS, users} as const),\r\n    setCurrentPage: (currentPage: number) => ({type: SET_CURRENT_PAGE, currentPage} as const),\r\n    setPage: (totalUsersCount: number) => ({type: SET_PAGE, totalUsersCount} as const),\r\n    toggleIsFetching: (isFetching: boolean) => ({type: TOGGLE_IS_FETCHING, isFetching} as const),\r\n    toggleIsFollowing: (isFollowing: boolean, userId: number) => ({type: TOGGLE_IS_FOLLOWING, isFollowing, userId} as const),\r\n    setFilter: (filter: FilterType) => ({type: SET_FILTER, payload: filter} as const)\r\n}   \r\n\r\n\r\nexport const getUsers = (currentPage: number, count: number, filter: FilterType): ThunkType => {\r\n    return async (dispatch) => {\r\n        dispatch(actions.toggleIsFetching(true));\r\n        dispatch(actions.setCurrentPage(currentPage));\r\n        dispatch(actions.setFilter(filter));\r\n\r\n        let response = await usersAPI.getUsers(currentPage, count, filter.term, filter.friend)\r\n                dispatch(actions.toggleIsFetching(false));\r\n                dispatch(actions.setUsers(response.items));\r\n                dispatch(actions.setPage(response.totalCount));\r\n    }\r\n}\r\n\r\nconst followUnfollowFlow = async (dispatch: Dispatch<ActionsType>, userId: number, apiMethod: any, actionCreator: (userId: number) => ActionsType) => {\r\n        dispatch(actions.toggleIsFollowing(true, userId))\r\n        let subscribe = await apiMethod(userId)\r\n                if (subscribe.resultCode === ResultCodeEnum.Success) {\r\n                    dispatch(actionCreator(userId))\r\n                }\r\n                dispatch(actions.toggleIsFollowing(false, userId))\r\n    }\r\n\r\nexport const follow = (userId: number): ThunkType  => {\r\n    return async (dispatch) => {\r\n      await  followUnfollowFlow(dispatch, userId, usersAPI.follow, actions.followSuccess)\r\n    }\r\n}\r\n\r\nexport const unfollow = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        await followUnfollowFlow(dispatch, userId, usersAPI.unfollow, actions.unfollowSuccess)\r\n    }\r\n}\r\n\r\nexport default usersReducer;\r\n\r\nexport type initialStateActionType = typeof initialState;\r\nexport type FilterType = typeof initialState.filter\r\ntype ActionsType = InferActionsTypes<typeof actions>;\r\ntype ThunkType = BaseThunkType<ActionsType>;","import {Action ,combineReducers, createStore, applyMiddleware, compose} from 'redux';\r\nimport authReducer from './auth-reducer';\r\nimport dialogsReducer from './dialogs-reducer';\r\nimport profileReducer from './profile-reducer';\r\nimport usersReducer from './users-reducer';\r\nimport thunkMiddleware, { ThunkAction } from 'redux-thunk';\r\nimport { reducer as formReducer } from 'redux-form';\r\nimport appReducer from './app-reducer';\r\n\r\nlet rootReducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer,\r\n});\r\n\r\ntype RootReducersType = typeof rootReducers;\r\nexport type AppStateType = ReturnType<RootReducersType>;\r\n\r\nexport type InferActionsTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never\r\n\r\nexport type BaseThunkType<A extends Action = Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n//@ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose   ;\r\nconst store = createStore(rootReducers, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n//@ts-ignore\r\nwindow.store = store;\r\n\r\nexport default store;","import React from \"react\"\r\n\r\nexport function withSuspense(WrappedComponent) {\r\n    return (props) => {\r\n        return <React.Suspense fallback={<div>loading...</div>} >\r\n            <WrappedComponent {...props} />\r\n        </React.Suspense>\r\n    }\r\n}\r\n","import { createSelector } from \"reselect\";\r\nimport { AppStateType } from \"./redux-store\";\r\n\r\nconst getUserSelector = (state: AppStateType) => {\r\n    return state.usersPage.users\r\n}\r\n\r\nexport const getUser = createSelector(getUserSelector, \r\n    (users) => {\r\n    return users.filter(u => true)\r\n})\r\n\r\nexport const getCount = (state: AppStateType) => {\r\n    return state.usersPage.count\r\n}\r\n\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersCount\r\n}\r\n\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage\r\n}\r\n\r\nexport const getIsFetching = (state: AppStateType) => {\r\n    return state.usersPage.isFetching\r\n}\r\n\r\nexport const getIsFollowing = (state: AppStateType) => {\r\n    return state.usersPage.isFollowing\r\n}\r\n\r\nexport const getSetFilter = (state: AppStateType) => {\r\n    return state.usersPage.filter\r\n}","import React, { useState } from 'react';\r\nimport s from './Paginator.module.css';\r\nimport cn from \"classnames\";\r\nimport { FilterType } from '../../redux/users-reducer';\r\n\r\ntype PropsType = {\r\n    totalUsersCount: number\r\n    count: number\r\n    portionSize?: number\r\n    currentPage: number\r\n    onPageChanged: (currentPage: number) => void\r\n}\r\n\r\nlet Paginator: React.FC<PropsType> = ({portionSize = 10, ...props}) => {\r\n\r\n    let pagesCount = Math.ceil(props.totalUsersCount / props.count);\r\n\r\n    let pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize);\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n\r\n    return (\r\n        <div className={cn(s.pageNumber)}>\r\n            {portionNumber > 1 &&\r\n            <button onClick={ () => {setPortionNumber(portionNumber - 1) }}>prev</button>}\r\n            {pages\r\n            .filter(p => p >=leftPortionPageNumber && p <=  rightPortionPageNumber)\r\n            .map((p) => {\r\n                return (\r\n                <span className={ cn({\r\n                    [s.selectedPage]: props.currentPage === p\r\n                }, s.pageNumber) }\r\n                    key={p}\r\n                    onClick={(e) => {\r\n                        props.onPageChanged(p);\r\n                    }}>{p}</span>\r\n            )})}\r\n        {portionCount > portionNumber &&\r\n            <button onClick={() => { setPortionNumber(portionNumber + 1)}}>Next</button>}\r\n        </div>\r\n    )\r\n}\r\nexport default Paginator;\r\n","import React from 'react';\r\nimport s from './Users.module.css';\r\nimport userPhoto from '../../assets/images/user.jpg';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { usersType } from '../../TypeScript/TypeScript';\r\n\r\ntype PropsType = {\r\n    u: usersType,\r\n    isFollowing: Array<number>,\r\n    unfollowUser: (userId: number) => void\r\n    followUser: (userId: number) => void\r\n\r\n}\r\n\r\nlet User: React.FC<PropsType> = (props) => {\r\n   \r\n    return (\r\n            <div className={s.user}>\r\n                <span >\r\n                    \r\n                    <div >\r\n                    <NavLink to={'/profile/' + props.u.id}>\r\n                        <img className={s.photo} src={props.u.photos.large != null ? props.u.photos.large : userPhoto} />\r\n                    </NavLink>\r\n                    </div>\r\n                    <div>\r\n                        {props.u.followed \r\n                        ? <button disabled={props.isFollowing.some(id => id === props.u.id)} \r\n                        onClick={() => {props.unfollowUser(props.u.id) }}>unfollow</button> \r\n                        : <button disabled={props.isFollowing.some(id => id === props.u.id)} \r\n                        onClick={() => {props.followUser(props.u.id) }}>follow</button>}\r\n                    </div>\r\n                </span>\r\n                <span>\r\n                    <div>\r\n                        <b>Name: </b> {props.u.name}\r\n                    </div>\r\n                    <div>\r\n                        <b>Status: </b>{props.u.status}\r\n                    </div>\r\n                </span>\r\n            </div>)\r\n}\r\nexport default User;","import { Form, Formik, Field } from \"formik\"\r\nimport React from \"react\"\r\nimport { useSelector } from \"react-redux\"\r\nimport { FilterType } from \"../../redux/users-reducer\"\r\nimport { getSetFilter } from \"../../redux/users-selectors\"\r\n\r\nconst usersSearchFormValidate = (values: any) => {\r\n    const errors = {}\r\n    return errors\r\n}\r\n\r\ntype FriendType = \"true\" | \"false\" | \"null\"\r\n\r\ntype FormType = {\r\n    term: string,\r\n    friend: \"true\" | \"false\" | \"null\"\r\n}\r\n\r\ntype UsersSearchFormType = {\r\n    onFilterChange: (filter: FilterType) => void\r\n}\r\n\r\nexport const UsersSearchForm: React.FC<UsersSearchFormType> = React.memo((props) => {\r\n    const filter = useSelector(getSetFilter)\r\n    const submit =  (values: FormType, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void }) => {\r\n        const filter: FilterType = {\r\n            term: values.term,\r\n            friend: values.friend === \"null\" ? null : values.friend === \"true\" ? true : false\r\n        }\r\n\r\n        props.onFilterChange(filter)\r\n        setSubmitting(false);\r\n    }\r\n    return <div>\r\n        <Formik\r\n            enableReinitialize\r\n            initialValues={{term: filter.term, friend: String(filter.friend) as FriendType}}\r\n            validate={usersSearchFormValidate}\r\n            onSubmit={submit}\r\n        >\r\n            {({ isSubmitting }) => (\r\n                <Form>\r\n                    <Field type=\"text\" name=\"term\"/>\r\n                    <Field name=\"friend\" as=\"select\">\r\n                        <option value=\"null\">All</option>\r\n                        <option value=\"true\">Only followed</option>\r\n                        <option value=\"false\">Only unfollowed</option>\r\n                    </Field>\r\n                    <button type=\"submit\" disabled={isSubmitting}>\r\n                        find\r\n                    </button>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    </div>\r\n}\r\n)","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Paginator from '../../common/Paginator/Paginator';\r\nimport { FilterType, getUsers, follow,  unfollow} from '../../redux/users-reducer';\r\nimport { getCount, getCurrentPage, getIsFollowing, getSetFilter, getTotalUsersCount, getUser, } from '../../redux/users-selectors';\r\nimport User from './User';\r\nimport { UsersSearchForm } from './UsersSearchForm';\r\nimport * as queryString from 'querystring';\r\n\r\n\r\ntype QueryParamsType = { term?: string; page?: string; friend?: string }\r\n\r\nexport const Users = () => {\r\n   \r\n    const totalUsersCount = useSelector(getTotalUsersCount)\r\n    const count = useSelector(getCount)\r\n    const currentPage = useSelector(getCurrentPage)\r\n    const isFollowing = useSelector(getIsFollowing)\r\n    const filter = useSelector(getSetFilter)\r\n    const users = useSelector(getUser)\r\n    \r\n    const dispatch = useDispatch()\r\n\r\n    const history = useHistory()\r\n\r\n    useEffect(() => {\r\n        const parsed = queryString.parse(history.location.search.substr(1)) as QueryParamsType;\r\n        let actualPage = currentPage\r\n        let actualFilter = filter\r\n        if(!!parsed.page) actualPage = Number(parsed.page)\r\n        if(!!parsed.term) actualFilter = {...actualFilter, term: parsed.term as string}\r\n        \r\n        switch(parsed.friend) {\r\n            case \"null\":\r\n                actualFilter = {...actualFilter, friend: null}\r\n                break;\r\n            case \"true\":\r\n                actualFilter = {...actualFilter, friend: true}\r\n                break;\r\n            case \"false\":\r\n                actualFilter = {...actualFilter, friend: false}\r\n        }\r\n        dispatch(getUsers(actualPage, count, actualFilter));\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const query: QueryParamsType = {}\r\n\r\n        if (!!filter.term) query.term = filter.term\r\n        if (filter.friend !== null) query.friend = String(filter.friend)\r\n        if (currentPage !== 1) query.page = String(currentPage)\r\n\r\n        history.push({\r\n            pathname: '/users',\r\n            search: queryString.stringify(query)\r\n        })\r\n    }, [filter, currentPage])\r\n\r\n    const onPageChanged = (currentPage: number) => {\r\n        dispatch(getUsers(currentPage, count, filter));\r\n    }\r\n\r\n    const onFilterChange = (filter: FilterType) => {\r\n        dispatch(getUsers(1, count, filter))\r\n    }\r\n\r\n    const followUser = (userId: number) => {\r\n        dispatch(follow(userId))\r\n    } \r\n\r\n    const unfollowUser = (userId: number) => {\r\n        dispatch(unfollow(userId))\r\n    } \r\n\r\n    return <div >\r\n        <UsersSearchForm onFilterChange={onFilterChange}/>    \r\n        <Paginator totalUsersCount={totalUsersCount} count={count} onPageChanged={onPageChanged} currentPage={currentPage}/>\r\n        {\r\n            users.map(u => <User u={u} isFollowing={isFollowing} followUser={followUser} unfollowUser={unfollowUser} key={u.id} />)\r\n        }\r\n    </div>\r\n}\r\n\r\n\r\n\r\n\r\nexport default Users;","import { useSelector } from \"react-redux\";\r\nimport Loading from '../../common/Loading/Loading';\r\nimport { getIsFetching } from '../../redux/users-selectors';\r\nimport Users from './Users';\r\n\r\n\r\nexport const UsersPage = () => {\r\n    const isFetching = useSelector(getIsFetching)\r\n\r\n    return <>\r\n        {isFetching ? <Loading /> : null}\r\n        {<Users />}\r\n    </>\r\n\r\n}\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { InjectedFormProps, reduxForm } from 'redux-form';\r\nimport { createField, GetStringKeys, Input } from '../../common/FormControls/FormControls';\r\nimport { required } from '../../helpers/validate/validate';\r\nimport { login } from '../../redux/auth-reducer';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport s from './../../common/FormControls/FormControls.module.css';\r\n\r\ntype LoginFormOwnProps = {\r\n    captchaURL: string | null\r\n}\r\n\r\nexport type LoginFormValuesType = {\r\n    captcha: string\r\n    rememberMe: boolean\r\n    password: string\r\n    email: string\r\n}\r\n\r\ntype LoginFormValuesTypeKeys = GetStringKeys<LoginFormValuesType>\r\n\r\nexport const Login = () => {\r\n\r\n\r\n    const captchaURL = useSelector((state: AppStateType) => state.auth.captchaURL)\r\n    const isAuth = useSelector((state: AppStateType) => state.auth.isAuth)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const loginApp = (email: string, password: string, rememberMe: boolean, captcha: string) => {\r\n        dispatch(login(email, password, rememberMe, captcha))\r\n    }\r\n    \r\n    const onSubmit = (formData: LoginFormValuesType) => {\r\n        loginApp(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n    }\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={\"/profile\"} />\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <LoginReduxForm captchaURL={captchaURL} onSubmit={onSubmit} />\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            {createField<LoginFormValuesTypeKeys>(\"Email\", \"email\", Input, [required])}\r\n            {createField<LoginFormValuesTypeKeys>(\"Password\", \"password\", Input, [required], {type: \"password\"})}\r\n            {createField<LoginFormValuesTypeKeys>(undefined, \"rememberMe\", Input, [], {type: \"checkbox\"},  \"remember me\")}\r\n\r\n            {props.captchaURL && <img src={props.captchaURL} />}\r\n            {props.captchaURL && createField<LoginFormValuesTypeKeys>(\"Symbols from image\", \"captcha\", Input, [required], {})}\r\n            {props.error && <div className={s.formSummuryError}>\r\n                {props.error}\r\n            </div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nlet LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({\r\n    form: 'Login'\r\n})(LoginForm)\r\n\r\n","import React, {Component} from 'react';\r\nimport './App.css';\r\nimport Navbar from './components/Navbar/Navbar';\r\nimport {BrowserRouter, HashRouter, Redirect, Route, Switch, withRouter} from \"react-router-dom\";\r\n\r\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\r\nimport {connect, Provider} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {inisializedApp} from \"./redux/app-reducer\";\r\n\r\nimport store, {AppStateType} from \"./redux/redux-store\";\r\nimport {withSuspense} from \"./hoc/withSuspense\";\r\nimport { UsersPage } from './components/Users/UsersContainer';\r\nimport Loading from './common/Loading/Loading';\r\nimport { Login } from './components/Login/Login';\r\n\r\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'));\r\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'));\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropsType = {\r\n    initializeApp: () => void\r\n}\r\n\r\nconst SuspendedDialogs = withSuspense(DialogsContainer);\r\nconst SuspendedProfile = withSuspense(ProfileContainer);\r\n\r\n\r\nclass App extends Component<MapPropsType & DispatchPropsType> {\r\n    render() {\r\n        if (!this.props.inisialized) {\r\n            return <Loading/>\r\n        }\r\n\r\n        return (\r\n            <div className='app-wrapper'>\r\n                <HeaderContainer/>\r\n                <Navbar/>\r\n                <div className='app-wrapper-content'>\r\n                    <Switch>\r\n                        <Route exact path='/'\r\n                               render={() => <Redirect to={\"/profile\"}/>}/>\r\n\r\n                        <Route path='/dialogs'\r\n                               render={() => <SuspendedDialogs /> }/>\r\n\r\n                        <Route path='/profile/:userId?'\r\n                               render={() => <SuspendedProfile /> }/>\r\n\r\n                        <Route path='/users'\r\n                               render={() => <UsersPage/>}/>\r\n\r\n                        <Route path='/login'\r\n                               render={() => <Login/>}/>\r\n\r\n                        <Route path='*'\r\n                               render={() => <div>404 NOT FOUND</div>}/>\r\n                    </Switch>\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    inisialized: state.app.inisialized\r\n})\r\n\r\nlet AppContainer = compose<React.ComponentType>(\r\n    withRouter,\r\n    connect(mapStateToProps, {inisializedApp}))(App);\r\n\r\nconst SamuraiJSApp: React.FC = () => {\r\n    return <HashRouter>\r\n        <Provider store={store}>\r\n            <AppContainer/>\r\n        </Provider>\r\n    </HashRouter>\r\n}\r\n\r\nexport default SamuraiJSApp;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import ReactDOM from 'react-dom';\r\nimport SamuraiJSApp from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n\r\n\r\n  ReactDOM.render(\r\n    <SamuraiJSApp/>, document.getElementById('root'));\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControls\":\"FormControls_formControls__blJxk\",\"error\":\"FormControls_error__1EooD\",\"formSummuryError\":\"FormControls_formSummuryError__10ZPT\"};","export type ValidateType = (value: string) => string | undefined\r\n\r\nexport const required: ValidateType = (value) => {\r\n    if(value) return undefined;\r\n    return \"Field is required\"\r\n}\r\n\r\nexport const maxLengthCreator = (maxSymbols: number): ValidateType => {\r\n    return (value) => {\r\n        if(value.length > maxSymbols) return `Max length is ${maxSymbols} symbols`;\r\n        return undefined\r\n    }\r\n}","export default __webpack_public_path__ + \"static/media/loading.4fe2dccd.svg\";","import loading from './../../assets/images/loading.svg';\r\nimport s from './Loading.module.css';\r\n\r\nlet Loading = () => {\r\n    return <img className={s.loading} src={loading}/>\r\n}\r\n\r\nexport default Loading;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1yfDu\",\"loginBlock\":\"Header_loginBlock__2gwkD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageNumber\":\"Paginator_pageNumber__3p_Ot\",\"selectedPage\":\"Paginator_selectedPage__GYUON\"};"],"sourceRoot":""}