{"version":3,"sources":["components/Dialogs/Dialogs.module.css","hoc/withAuthRedirect.js","components/Dialogs/DialogsItem/DialogsItem.tsx","components/Dialogs/MessageItem/MessageItem.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","mapStateToProps","state","isAuth","auth","DialogsItem","props","className","s","item","to","id","name","MessageItem","message","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","createField","Textarea","required","Dialogs","dialogsElements","dialogs","map","d","messagesElements","messages","m","dialog","values","addMessage","addMessageText","compose","connect","dialogsPage","actions","Component","RedirectComponent","this","React"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,OAAS,wBAAwB,KAAO,sBAAsB,QAAU,2B,0HCoBzHC,EAAkB,SAACC,GACnB,MAAO,CACHC,OAAQD,EAAME,KAAKD,S,4DCNZE,EAT0B,SAACC,GAEtC,OACI,qBAAKC,UAAWC,IAAEC,KAAlB,SACI,cAAC,IAAD,CAASC,GAAI,YAAcJ,EAAMK,GAAjC,SAAsCL,EAAMM,UCEzCC,EAN0B,SAACP,GACtC,OACI,qBAAKC,UAAWC,IAAEM,QAAlB,SAA4BR,EAAMQ,WCwCtCC,EAAcC,YAAiB,IAa7BC,EAAsBC,YAAsB,CAC9CC,KAAM,WADkBD,EAXoC,SAACZ,GAC7D,OACA,uBAAMc,SAAUd,EAAMe,aAAtB,UACSC,YAAuC,oBAAqB,iBAAkBC,IAAU,CAACC,IAAUT,IACxG,8BACI,kDAUGU,EA9CsB,SAACnB,GAElC,IAAIoB,EAAkBpB,EAAMqB,QAAQC,KAAI,SAACC,GACrC,OAAO,cAAC,EAAD,CAAwBlB,GAAIkB,EAAElB,GAAIC,KAAMiB,EAAEjB,MAAxBiB,EAAElB,OAG3BmB,EAAmBxB,EAAMyB,SAASH,KAAI,SAACI,GACvC,OAAO,cAAC,EAAD,CAAwBrB,GAAIqB,EAAErB,GAAIG,QAASkB,EAAElB,SAA3BkB,EAAErB,OAS/B,OACI,sBAAKJ,UAAWC,IAAEmB,QAAlB,UACI,qBAAKpB,UAAWC,IAAEyB,OAAlB,SACKP,IAEL,qBAAKnB,UAAWC,IAAEuB,SAAlB,SACKD,IAEN,cAACb,EAAD,CAAqBG,SAbT,SAACc,GAChB5B,EAAM6B,WAAWD,EAAOE,uB,QCJjBC,sBACXC,aATkB,SAACpC,GACnB,MAAO,CACHyB,QAASzB,EAAMqC,YAAYZ,QAC3BI,SAAU7B,EAAMqC,YAAYR,YAM8D,CAACI,WAAYK,IAAQL,cJ1BvF,SAACM,GAAe,IAEtCC,EAFqC,4JAGvC,WACI,OAAIC,KAAKrC,MAAMH,OAER,cAACsC,EAAD,eAAeE,KAAKrC,QAFG,cAAC,IAAD,CAAUI,GAAI,eAJT,GAEXkC,IAAMH,WAUtC,OAFqCH,YAAQrC,EAARqC,CAAyBI,KIenDL,CAGbZ","file":"static/js/4.42ddb5a1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1Qshe\",\"dialog\":\"Dialogs_dialog__FAAT6\",\"item\":\"Dialogs_item__ktACb\",\"message\":\"Dialogs_message__2NOSR\"};","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    \r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if(!this.props.isAuth) return <Redirect to={'/login'}/>\r\n\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n    let connectedAuthRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n\r\n    return connectedAuthRedirectComponent;\r\n\r\n\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}","import { NavLink } from 'react-router-dom';\r\nimport s from './../Dialogs.module.css';\r\n\r\ntype PropsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nconst DialogsItem: React.FC<PropsType> = (props) => {\r\n\r\n    return (\r\n        <div className={s.item}>\r\n            <NavLink to={'/dialogs/' + props.id}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogsItem;","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\ntype PropsType = {\r\n    message: string\r\n    id: number\r\n}\r\n\r\nconst MessageItem: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div className={s.message}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default MessageItem;","import React from 'react';\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form';\r\nimport { createField, GetStringKeys, Textarea } from '../../common/FormControls/FormControls';\r\nimport { maxLengthCreator, required } from '../../helpers/validate/validate';\r\nimport { dialogsType, messagesType } from '../../TypeScript/TypeScript';\r\nimport s from './Dialogs.module.css';\r\nimport DialogsItem from './DialogsItem/DialogsItem';\r\nimport MessageItem from './MessageItem/MessageItem';\r\n\r\ntype PropsType = {\r\n    dialogs: Array<dialogsType>\r\n    messages: Array<messagesType>\r\n    addMessage: (addMessageText: string) => void\r\n}\r\n\r\ntype ValuesType = {\r\n    addMessageText: string\r\n}\r\n\r\ntype DialogsFormValuesTypeKeys = GetStringKeys<ValuesType>\r\n\r\nconst Dialogs: React.FC<PropsType> = (props) => {\r\n\r\n    let dialogsElements = props.dialogs.map((d) => {\r\n        return <DialogsItem key={d.id} id={d.id} name={d.name} />\r\n    });\r\n\r\n    let messagesElements = props.messages.map((m) => {\r\n        return <MessageItem key={m.id} id={m.id} message={m.message}/>\r\n    })\r\n\r\n\r\n    let onAddMessage = (values: ValuesType) => {\r\n        props.addMessage(values.addMessageText)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialog}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messagesElements}\r\n            </div>\r\n           <AddMessageFormRedux onSubmit={onAddMessage}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nlet maxLength50 = maxLengthCreator(50);\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<ValuesType>> = (props) => {\r\n    return (\r\n    <form onSubmit={props.handleSubmit}>\r\n            {createField<DialogsFormValuesTypeKeys>(\"send your message\", \"addMessageText\", Textarea, [required, maxLength50])}\r\n        <div>\r\n            <button>send</button>\r\n        </div>\r\n    </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm<ValuesType>({\r\n    form: 'message'\r\n  })(AddMessageForm)\r\n\r\nexport default Dialogs;","import { connect } from 'react-redux';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { actions } from '../../redux/dialogs-reducer';\r\nimport Dialogs from './Dialogs';\r\nimport { compose } from 'redux';\r\nimport { dialogsType, messagesType } from '../../TypeScript/TypeScript';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport React from 'react';\r\n\r\n\r\ntype OurPropsType = {}\r\n\r\ntype MapStateToPropsType = {\r\n    dialogs: Array<dialogsType>\r\n    messages: Array<messagesType>\r\n}\r\n\r\ntype MapDispatchToProps = {\r\n    addMessage: (addMessageText: string) => void\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        dialogs: state.dialogsPage.dialogs,\r\n        messages: state.dialogsPage.messages,\r\n    }\r\n}\r\n \r\n\r\nexport default compose<React.ComponentType>(\r\n    connect<MapStateToPropsType, MapDispatchToProps, OurPropsType, AppStateType>(mapStateToProps, {addMessage: actions.addMessage}),\r\n    withAuthRedirect\r\n)(Dialogs)"],"sourceRoot":""}