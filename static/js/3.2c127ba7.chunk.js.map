{"version":3,"sources":["common/Error/Error.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","common/Error/ErrorStatus.tsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","common/Error/ErrorPhoto.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","Post","props","className","s","item","src","message","like","MyPosts","React","memo","postsElement","posts","reverse","map","p","id","AddPostFormRedux","onSubmit","values","addPost","addPostText","maxLength10","maxLengthCreator","reduxForm","form","handleSubmit","Field","name","placeholder","component","Textarea","validate","required","MyPostsContainer","connect","state","profilePage","actions","compose","errorStatus","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","isOwner","onChange","e","currentTarget","value","autoFocus","onBlur","updateUserStatus","ProfileDataReduxForm","error","formSummuryError","createField","Input","undefined","type","Object","keys","profile","contacts","key","errorPhoto","ProfileData","onClick","goToEditMode","fullName","aboutMe","lookingForAJobDescription","lookingForAJob","contactTitle","contactValye","Contacts","href","ProfileInfo","Loading","content__img","profile__info","MainPhoto","photos","large","userPhoto","target","files","length","savePhoto","initialValues","formData","saveProfile","then","Profile","autorizedUserId","auth","isAuth","getUserProfile","getUserStatus","withRouter","userId","match","params","history","push","reFreshProfile"],"mappings":"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","file":"static/js/3.2c127ba7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorStatus\":\"Error_errorStatus__iQcAX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__4FtC2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content__img\":\"ProfileInfo_content__img__2F_jQ\",\"profile__info\":\"ProfileInfo_profile__info__2SyLg\",\"MainPhoto\":\"ProfileInfo_MainPhoto__153xZ\"};","import s from './Post.module.css';\r\n\r\ntype PropsType = {\r\n    message: string\r\n    like: number\r\n    id: number\r\n}\r\n\r\nconst Post: React.FC<PropsType> = (props) => {\r\n   \r\n    return (\r\n        <div className={s.item}>\r\n            <img src=\"https://a3.animevost.org/uploads/fotos/foto_400157.jpg\" />\r\n            {props.message}\r\n            <div>\r\n                <span><b>like</b> {props.like}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form';\r\nimport { Textarea } from '../../../common/FormControls/FormControls';\r\nimport { maxLengthCreator, required } from '../../../helpers/validate/validate';\r\nimport { postsType } from '../../../TypeScript/TypeScript';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\n\r\ntype PropsType = {\r\n    posts: Array<postsType>\r\n    addPost: (addPostText: string) => void\r\n\r\n}\r\n\r\ntype ValuesType = {\r\n    addPostText: string\r\n}\r\n\r\n\r\nconst MyPosts: React.FC<PropsType> = React.memo((props) => {\r\n    let postsElement = [...props.posts].reverse().map((p) => {\r\n        return <Post key={p.id} id={p.id} message={p.message} like={p.like} />\r\n    })\r\n\r\n\r\n    let onAddPost = (values: ValuesType) => {\r\n        props.addPost(values.addPostText)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3>My Posts</h3>\r\n            <AddPostFormRedux onSubmit={onAddPost}/>\r\n            {postsElement}\r\n        </div>\r\n    )\r\n})\r\n\r\nlet maxLength10 = maxLengthCreator(10);\r\n\r\n\r\n\r\nconst AddPostForm: React.FC<InjectedFormProps<ValuesType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name={\"addPostText\"} placeholder={\"add post\"} component={Textarea} validate={[required, maxLength10]}/>\r\n            </div>\r\n            <div>\r\n                <button>add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddPostFormRedux = reduxForm<ValuesType>({\r\n    form: 'post'\r\n  })(AddPostForm)\r\n  \r\n\r\nexport default MyPosts;","import { connect } from 'react-redux';\r\nimport { actions } from '../../../redux/profile-reducer';\r\nimport { AppStateType } from '../../../redux/redux-store';\r\nimport { postsType } from '../../../TypeScript/TypeScript';\r\nimport MyPosts from './MyPosts';\r\n\r\ntype OurPropsType = {}\r\n\r\ntype MapStateToPropsType = {\r\n    posts: Array<postsType>\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    addPost: (addPostText: string) => void\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\n\r\n\r\nlet MyPostsContainer = connect<MapStateToPropsType, MapDispatchToPropsType, OurPropsType, AppStateType>(mapStateToProps, { addPost: actions.addPost })(MyPosts)\r\n\r\nexport default MyPostsContainer;","import { compose } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport s from './Error.module.css';\r\nimport React from 'react';\r\nimport { AppStateType } from '../../redux/redux-store';\r\n\r\ntype MapStateToPropsType = {\r\n    errorStatus: string | boolean\r\n}\r\n\r\nlet ErrorStatus: React.FC<MapStateToPropsType> = (props) => {\r\nreturn <div className={s.errorStatus}>{props.errorStatus}</div>\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        errorStatus: state.profilePage.errorStatus\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {})\r\n)(ErrorStatus);","import React, { ChangeEvent,  useEffect, useState } from 'react';\r\nimport ErrorStatus from '../../../common/Error/ErrorStatus';\r\n\r\n\r\n\r\n\r\n\r\ntype PropsType = {\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n    isOwner: boolean\r\n    errorStatus: boolean | string\r\n}\r\n\r\nconst ProfileStatusWithHooks: React.FC<PropsType> = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n    \r\n    \r\n     useEffect(() => {\r\n        setStatus(props.status); \r\n    }, [props.status] )\r\n\r\n    const activeteEditMode = () => {\r\n        if(props.isOwner) {\r\n            setEditMode(true);\r\n        }       \r\n    }\r\n\r\n    const deActiveteEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateUserStatus(status);\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n\r\n\r\n\r\n        return (\r\n            <div>\r\n                {!editMode &&\r\n                <div>\r\n                    <span onDoubleClick={activeteEditMode}><b>Status: </b>{props.status || \"No status\"}</span>\r\n                </div>}\r\n                {editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={deActiveteEditMode} value={status} />\r\n                </div>}\r\n                {props.errorStatus && <ErrorStatus/>}\r\n            </div>\r\n        )\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import React from 'react';\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form';\r\nimport { createField, GetStringKeys, Input, Textarea } from '../../../common/FormControls/FormControls';\r\nimport { profileType } from '../../../TypeScript/TypeScript';\r\nimport s from './../../../common/FormControls/FormControls.module.css';\r\nimport { ProfileTypeFormData, ProfileTypeOwnProps } from './ProfileInfo';\r\n\r\ntype PropsType = {\r\n    profile: profileType\r\n}\r\ntype ProfileDataFormValuesTypeKeys = GetStringKeys<ProfileTypeFormData>\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileTypeFormData, PropsType> & PropsType> = (props) => {\r\n    return <form onSubmit={props.handleSubmit}>\r\n        {props.error && <div className={s.formSummuryError}>\r\n            {props.error}\r\n        </div>}\r\n        <button>save</button>\r\n        <div>\r\n            <b>Full name: </b> {createField<ProfileDataFormValuesTypeKeys>(\"Full Name\", \"fullName\", Input, [])}\r\n        </div>\r\n        <div>\r\n            <b>About me: </b> {createField<ProfileDataFormValuesTypeKeys>(\"About me\", \"aboutMe\", Textarea, [])}\r\n        </div>\r\n        <div>\r\n            <b>My skills: </b> {createField<ProfileDataFormValuesTypeKeys>(\"My skills\", \"lookingForAJobDescription\", Textarea, [])}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job: </b> {createField<ProfileDataFormValuesTypeKeys>(undefined, \"lookingForAJob\", Input, [], {type: \"checkbox\"})}\r\n            \r\n        </div>\r\n        <div>\r\n            <b>Contacts: </b> {Object.keys(props.profile.contacts).map(key => {\r\n                return <div key={key}><b>{key}: </b>{createField(key, \"contacts.\" + key, Input, [])} </div>\r\n            })}\r\n        </div>\r\n    </form>\r\n}\r\n\r\nconst ProfileDataReduxForm = reduxForm<ProfileTypeFormData, PropsType>({ form: \"edit-profile\" })(ProfileDataForm);\r\n\r\nexport default ProfileDataReduxForm;","import { compose } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport s from './Error.module.css';\r\nimport { AppStateType } from '../../redux/redux-store';\r\n\r\ntype MapStateToPropsType = {\r\n    errorPhoto: boolean | string\r\n}\r\n\r\nlet ErrorPhoto: React.FC<MapStateToPropsType> = (props) => {\r\nreturn <div className={s.errorStatus}>{props.errorPhoto}</div>\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        errorPhoto: state.profilePage.errorPhoto\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {})\r\n)(ErrorPhoto);","import s from './ProfileInfo.module.css';\r\nimport Loading from '../../../common/Loading/Loading'\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\r\nimport userPhoto from '../../../assets/images/user.jpg';\r\nimport React, { ChangeEvent, useState } from 'react';\r\nimport ProfileDataReduxForm from './ProfileDataForm';\r\nimport ErrorPhoto from '../../../common/Error/ErrorPhoto';\r\nimport { contactsType, photosType, profileType } from '../../../TypeScript/TypeScript';\r\nimport { InjectedFormProps } from 'redux-form';\r\n\r\n\r\n\r\nexport type ProfileTypeOwnProps = {\r\n    savePhoto: (file: File) => void\r\n    profile: profileType | null\r\n    saveProfile: (profile: profileType | null) => Promise<void>\r\n    errorPhoto: string | boolean\r\n    isOwner: boolean\r\n    errorStatus: boolean | string\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\nexport type ProfileTypeFormData = {\r\n    userId: number | null\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    contacts: contactsType\r\n    photos: photosType\r\n    aboutMe: string\r\n}\r\n\r\nconst ProfileInfo: React.FC<ProfileTypeOwnProps> = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n\r\n    if (!props.profile) {\r\n        return <Loading />\r\n    }\r\n\r\n    const onChangeMainPhoto = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            props.savePhoto(e.target.files[0])\r\n        } \r\n    }\r\n\r\n    const onSubmit = (formData: ProfileTypeFormData) => {\r\n        props.saveProfile(formData).then(\r\n            () => {\r\n                setEditMode(false)\r\n            }\r\n        )     \r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <img className={s.content__img} src=\"https://c.wallhere.com/photos/2f/d7/mountain_lake_beautiful_night-1018189.jpg!d\" />\r\n            <div className={s.profile__info}>\r\n                <img className={s.MainPhoto} src={props.profile.photos.large || userPhoto} />\r\n                {props.errorPhoto && <ErrorPhoto/>}\r\n                {props.isOwner && <input type={\"file\"} onChange={onChangeMainPhoto} />}\r\n                <ProfileStatusWithHooks errorStatus={props.errorStatus} isOwner={props.isOwner} status={props.status} updateUserStatus={props.updateUserStatus} />\r\n                {editMode \r\n             ? <ProfileDataReduxForm initialValues={props.profile} onSubmit={onSubmit} profile={props.profile}/> \r\n             : <ProfileData goToEditMode={() => {setEditMode(true)}} profile={props.profile} isOwner={props.isOwner}/>}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ProfileDataTypeOwnProps = {\r\n    goToEditMode: () => void\r\n    isOwner: boolean\r\n    profile: profileType\r\n}\r\n\r\nconst ProfileData: React.FC<ProfileDataTypeOwnProps> = (props) => {\r\n    return <div>\r\n       <div>{props.isOwner && <button onClick={props.goToEditMode}>edit</button>}</div>\r\n        <div>\r\n            <b>Full name: </b> {props.profile.fullName}\r\n        </div>\r\n        <div>\r\n            <b>About me: </b> {props.profile.aboutMe}\r\n        </div>\r\n        <div>\r\n            <b>My skills: </b> {props.profile.lookingForAJobDescription}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job: </b> {props.profile.lookingForAJob ? \"yes\" : \"no\"}\r\n        </div>\r\n        <div>\r\n            <b>Contacts: </b> {Object.keys(props.profile.contacts).map(key => {\r\n                return <Contacts key={key} contactTitle={key} contactValye={props.profile.contacts[key as keyof contactsType]} />\r\n            })}\r\n        </div>\r\n    </div>\r\n}\r\n\r\ntype ContactsType = {\r\n    contactTitle: string\r\n    contactValye: string\r\n}\r\n\r\nconst Contacts: React.FC<ContactsType> = ({ contactTitle, contactValye }) => {\r\n    return <div>\r\n        <b>{contactTitle}: </b> <a href={contactValye}>{contactValye}</a>\r\n    </div>\r\n}\r\n\r\nexport default ProfileInfo;","import { profileType } from '../../TypeScript/TypeScript';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\n\r\ntype PropsType = {\r\n  errorStatus: boolean | string\r\n  saveProfile: (profile: profileType | null) => Promise<void>\r\n  savePhoto: (file: File) => void\r\n  isOwner: boolean\r\n  profile: profileType | null\r\n  status: string\r\n  updateUserStatus: (status: string) => void\r\n  errorPhoto: boolean | string\r\n}\r\n\r\nconst Profile: React.FC<PropsType> = (props) => {\r\n\r\n  return (\r\n    <div>\r\n      <ProfileInfo errorStatus={props.errorStatus} saveProfile={props.saveProfile} savePhoto={props.savePhoto} \r\n      isOwner={props.isOwner} profile={props.profile} errorPhoto={props.errorPhoto} status={props.status} updateUserStatus={props.updateUserStatus}/>\r\n      <MyPostsContainer />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Profile;","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Profile from './Profile';\r\nimport { getUserProfile, getUserStatus, updateUserStatus, savePhoto, saveProfile } from '../../redux/profile-reducer';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { compose } from 'redux';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport { profileType } from '../../TypeScript/TypeScript';\r\n\r\ntype PropsType = MapStateToPropsType & MapDispatchToPropsType & OurPropsType\r\n\r\ntype OurPropsType = {\r\n  match: any\r\n  history: any\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n  profile: profileType | null\r\n  status: string\r\n  autorizedUserId: number | null\r\n  isAuth: boolean\r\n  errorStatus: boolean | string\r\n  errorPhoto: boolean | string\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n  getUserProfile: (userId: number) => void\r\n  getUserStatus: (userId: number) => void\r\n  updateUserStatus: (status: string) => void\r\n  savePhoto: (file: File) => void\r\n  saveProfile: (profile: profileType | null) => Promise<void>\r\n}\r\n\r\n\r\nconst ProfileContainer: React.FC<PropsType> = (props) =>  {\r\n const reFreshProfile = () => {\r\n    let userId = props.match.params.userId;\r\n    if (!userId) {\r\n      userId = props.autorizedUserId;\r\n      if (!userId) {\r\n        props.history.push(\"/login\")\r\n      }\r\n    }\r\n    props.getUserProfile(userId)\r\n    props.getUserStatus(userId)\r\n  }\r\n\r\n  useEffect(()=>{\r\n    reFreshProfile()\r\n  }, [props.match.params.userId])\r\n\r\n      return <div>\r\n        <Profile {...props}\r\n          saveProfile={props.saveProfile}\r\n          savePhoto={props.savePhoto}\r\n          isOwner={!props.match.params.userId}\r\n          profile={props.profile}\r\n          status={props.status}\r\n          updateUserStatus={props.updateUserStatus}\r\n          errorStatus={props.errorStatus}\r\n          errorPhoto={props.errorPhoto} />\r\n      </div>\r\n  }\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n  return {\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    autorizedUserId: state.auth.id,\r\n    isAuth: state.auth.isAuth,\r\n    errorStatus: state.profilePage.errorStatus,\r\n    errorPhoto: state.profilePage.errorPhoto\r\n  }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n  connect(mapStateToProps, { getUserProfile, getUserStatus, updateUserStatus, savePhoto, saveProfile }),\r\n  withRouter,\r\n)(ProfileContainer)\r\n"],"sourceRoot":""}